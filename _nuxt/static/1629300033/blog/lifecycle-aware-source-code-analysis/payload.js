__NUXT_JSONP__("/blog/lifecycle-aware-source-code-analysis", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L){return {data:[{doc:{slug:"lifecycle-aware-source-code-analysis",description:w,title:"Android架构组件Lifecycle-Aware源码解析",toc:[{id:k,depth:x,text:k},{id:s,depth:x,text:s},{id:z,depth:A,text:B},{id:t,depth:A,text:t},{id:u,depth:x,text:u}],body:{type:C,children:[{type:b,tag:D,props:{},children:[{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:E}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:F,props:{},children:[{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:H}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:I}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:v,props:{id:k},children:[{type:b,tag:d,props:{href:J,ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:k}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:w}]},{type:a,value:c},{type:a,value:c},{type:b,tag:v,props:{id:s},children:[{type:b,tag:d,props:{href:"#%E4%BD%BF%E7%94%A8",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:s}]},{type:a,value:c},{type:b,tag:K,props:{id:z},children:[{type:b,tag:d,props:{href:"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8lifecycle-aware%E7%BB%84%E4%BB%B6%EF%BC%9F",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:y,props:{id:"1-引入库"},children:[{type:b,tag:d,props:{href:"#1-%E5%BC%95%E5%85%A5%E5%BA%93",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:"1. 引入库"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"implementation 'android.arch.lifecycle:extensions:1.0.0’\nannotationProcessor 'android.arch.lifecycle:compiler:1.0.0’\n\n"}]}]}]},{type:a,value:c},{type:b,tag:y,props:{id:"2-创建自定义的生命周期观察者"},children:[{type:b,tag:d,props:{href:"#2-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%A7%82%E5%AF%9F%E8%80%85",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:"2. 创建自定义的生命周期观察者"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"public  class CustomLifecycleObserver implements LifecycleObserver {\n\n    punlic CustomLifecycleObserver(......){\n        ......\n    }\n    \n     @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)\n     public void excuteMethodOnCreate(){\n        ......\n     }\n    \n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n     public void excuteMethodOnResume(){\n        ......\n     }  \n\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:y,props:{id:"3给activity添加生命周期观察者"},children:[{type:b,tag:d,props:{href:"#3%E7%BB%99activity%E6%B7%BB%E5%8A%A0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%A7%82%E5%AF%9F%E8%80%85",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:"3.给activity添加生命周期观察者"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"public class LifecycleOwnerActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ......\n         getLifecycle().addObserver(new CustomLifecycleObserver(...));\n     }\n}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:"通过上述简单的三个步骤，就能实现将和生命周期关联的逻辑隔离到单独的类中。关于这样做的好处，再举个例子，如果一个自定义view需要处理和生命周期相关的逻辑时，可以让view实现LifecycleObserver，并且给相应的方法添加上注解，通过步骤三的方式添加为观察者，就可以让view具有生命周期感知的能力。是不是很easy！！！"}]},{type:a,value:c},{type:b,tag:K,props:{id:t},children:[{type:b,tag:d,props:{href:"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E7%9A%84%E4%BE%8B%E5%AD%90",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:"接下来，再举个实际的例子希望能加深你的理解，该例子，主要是通过定位服务获取坐标，onResume的时候，启动获取程序；onPause的时候，关闭获取程序。完整代码如下:（该例子来自"},{type:b,tag:d,props:{href:"https:\u002F\u002Fgithub.com\u002Fgooglecodelabs\u002Fandroid-lifecycles",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"google"}]},{type:a,value:"（稍微修改了下））"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"public class LifecycleOwnerActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ......\n         bindLocationListener();\n     }\n} \n"}]}]}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"private void bindLocationListener() {\n        BoundLocationManager.bindLocationListenerIn(this, mGpsListener, getApplicationContext());\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"public class BoundLocationManager {\n    public static void bindLocationListenerIn(LifecycleOwner lifecycleOwner,\n     LocationListener listener, Context context) {\n        new BoundLocationListener(lifecycleOwner, listener, context);\n    }\n    static class BoundLocationListener implements LifecycleObserver {\n        private final Context mContext;\n        private LocationManager mLocationManager;\n        private final LocationListener mListener;\n\n        public BoundLocationListener(LifecycleOwner lifecycleOwner,\n                                     LocationListener listener, Context context) {\n            mContext = context;\n            mListener = listener;\n            lifecycleOwner.getLifecycle().addObserver(this);\n        }\n\n        @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n        void addLocationListener() {\n            mLocationManager =\n                    (LocationManager) mContext.getSystemService(Context.LOCATION_SERVICE);\n            mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, mListener);\n            Log.d(\"BoundLocationMgr\", \"Listener added\");\n\n            \u002F\u002F Force an update with the last location, if available.\n            Location lastLocation = mLocationManager.getLastKnownLocation(\n                    LocationManager.GPS_PROVIDER);\n            if (lastLocation != null) {\n                mListener.onLocationChanged(lastLocation);\n            }\n        }\n\n\n        @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n        void removeLocationListener() {\n            if (mLocationManager == null) {\n                return;\n            }\n            mLocationManager.removeUpdates(mListener);\n            mLocationManager = null;\n            Log.d(\"BoundLocationMgr\", \"Listener removed\");\n        }\n    }\n }\n\n"}]}]}]},{type:a,value:c},{type:b,tag:v,props:{id:u},children:[{type:b,tag:d,props:{href:"#%E8%A7%A3%E6%9E%90",ariaHidden:e,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:u}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:"......"}]}]},excerpt:{type:C,children:[{type:b,tag:D,props:{},children:[{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:E}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:F,props:{},children:[{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:G}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:H}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:I}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:v,props:{id:k},children:[{type:b,tag:d,props:{ariaHidden:e,href:J,tabIndex:f},children:[{type:b,tag:g,props:{className:[h,i]},children:[]}]},{type:a,value:k}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:w}]}]},dir:"\u002F",path:"\u002Flifecycle-aware-source-code-analysis",extension:".md",createdAt:L,updatedAt:L}}],fetch:{},mutations:[]}}("text","element","\n","a","true",-1,"span","icon","icon-link","p","简介","li","div","nuxt-content-highlight","pre","language-text","line-numbers","code","使用","实际应用的例子","解析","h2","Lifecycle-Aware，是google开发的用于生命周期感知的架构组件。",2,"h4","如何使用lifecycle-aware组件？",3,"如何使用Lifecycle-Aware组件？","root","blockquote","测试环境：","ul","Android Studio:3.1.3","Android SDK:27","Android Lifecycle:1.0.0","#%E7%AE%80%E4%BB%8B","h3","2021-08-18T15:19:29.712Z")));